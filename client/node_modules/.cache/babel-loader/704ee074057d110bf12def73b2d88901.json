{"ast":null,"code":"if (typeof moment === \"undefined\" && typeof require === 'function') {\n  var moment = require('moment');\n}\n\n(function (moment) {\n  var STRINGS = {\n    nodiff: '',\n    year: 'year',\n    years: 'years',\n    month: 'month',\n    months: 'months',\n    day: 'day',\n    days: 'days',\n    hour: 'hour',\n    hours: 'hours',\n    minute: 'minute',\n    minutes: 'minutes',\n    second: 'second',\n    seconds: 'seconds',\n    delimiter: ' '\n  };\n\n  function pluralize(num, word) {\n    return num + ' ' + STRINGS[word + (num === 1 ? '' : 's')];\n  }\n\n  function buildStringFromValues(yDiff, mDiff, dDiff, hourDiff, minDiff, secDiff) {\n    var result = [];\n\n    if (yDiff) {\n      result.push(pluralize(yDiff, 'year'));\n    }\n\n    if (mDiff) {\n      result.push(pluralize(mDiff, 'month'));\n    }\n\n    if (dDiff) {\n      result.push(pluralize(dDiff, 'day'));\n    }\n\n    if (hourDiff) {\n      result.push(pluralize(hourDiff, 'hour'));\n    }\n\n    if (minDiff) {\n      result.push(pluralize(minDiff, 'minute'));\n    }\n\n    if (secDiff) {\n      result.push(pluralize(secDiff, 'second'));\n    }\n\n    return result.join(STRINGS.delimiter);\n  }\n\n  function buildValueObject(yDiff, mDiff, dDiff, hourDiff, minDiff, secDiff, firstDateWasLater) {\n    return {\n      \"years\": yDiff,\n      \"months\": mDiff,\n      \"days\": dDiff,\n      \"hours\": hourDiff,\n      \"minutes\": minDiff,\n      \"seconds\": secDiff,\n      \"firstDateWasLater\": firstDateWasLater\n    };\n  }\n\n  moment.fn.preciseDiff = function (d2, returnValueObject) {\n    return moment.preciseDiff(this, d2, returnValueObject);\n  };\n\n  moment.preciseDiff = function (d1, d2, returnValueObject) {\n    var m1 = moment(d1),\n        m2 = moment(d2),\n        firstDateWasLater;\n    m1.add(m2.utcOffset() - m1.utcOffset(), 'minutes'); // shift timezone of m1 to m2\n\n    if (m1.isSame(m2)) {\n      if (returnValueObject) {\n        return buildValueObject(0, 0, 0, 0, 0, 0, false);\n      } else {\n        return STRINGS.nodiff;\n      }\n    }\n\n    if (m1.isAfter(m2)) {\n      var tmp = m1;\n      m1 = m2;\n      m2 = tmp;\n      firstDateWasLater = true;\n    } else {\n      firstDateWasLater = false;\n    }\n\n    var yDiff = m2.year() - m1.year();\n    var mDiff = m2.month() - m1.month();\n    var dDiff = m2.date() - m1.date();\n    var hourDiff = m2.hour() - m1.hour();\n    var minDiff = m2.minute() - m1.minute();\n    var secDiff = m2.second() - m1.second();\n\n    if (secDiff < 0) {\n      secDiff = 60 + secDiff;\n      minDiff--;\n    }\n\n    if (minDiff < 0) {\n      minDiff = 60 + minDiff;\n      hourDiff--;\n    }\n\n    if (hourDiff < 0) {\n      hourDiff = 24 + hourDiff;\n      dDiff--;\n    }\n\n    if (dDiff < 0) {\n      var daysInLastFullMonth = moment(m2.year() + '-' + (m2.month() + 1), \"YYYY-MM\").subtract(1, 'M').daysInMonth();\n\n      if (daysInLastFullMonth < m1.date()) {\n        // 31/01 -> 2/03\n        dDiff = daysInLastFullMonth + dDiff + (m1.date() - daysInLastFullMonth);\n      } else {\n        dDiff = daysInLastFullMonth + dDiff;\n      }\n\n      mDiff--;\n    }\n\n    if (mDiff < 0) {\n      mDiff = 12 + mDiff;\n      yDiff--;\n    }\n\n    if (returnValueObject) {\n      return buildValueObject(yDiff, mDiff, dDiff, hourDiff, minDiff, secDiff, firstDateWasLater);\n    } else {\n      return buildStringFromValues(yDiff, mDiff, dDiff, hourDiff, minDiff, secDiff);\n    }\n  };\n})(moment);","map":null,"metadata":{},"sourceType":"script"}